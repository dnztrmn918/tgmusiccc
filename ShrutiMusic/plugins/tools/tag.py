# Copyright (c) 2025 Nand Yaduwanshi <NoxxOP>
# Location: Supaul, Bihar
#
# All rights reserved.
#
# This code is the intellectual property of Nand Yaduwanshi.
# You are not allowed to copy, modify, redistribute, or use this
# code for commercial or personal projects without explicit permission.
#
# Allowed:
# - Forking for personal learning
# - Submitting improvements via pull requests
#
# Not Allowed:
# - Claiming this code as your own
# - Re-uploading without credit or permission
# - Selling or using commercially
#
# Contact for permissions:
# Email: badboy809075@gmail.com


import asyncio
from pyrogram import filters
from pyrogram.enums import ChatMembersFilter, ParseMode
from pyrogram.errors import FloodWait
import random
import re

from ShrutiMusic import app

SPAM_CHATS = []
EMOJI = [
    "ü¶ãü¶ãü¶ãü¶ãü¶ã",
    "üßöüå∏üßãüç¨ü´ñ",
    "ü•Äüå∑üåπüå∫üíê",
    "üå∏üåøüíÆüå±üåµ",
    "‚ù§Ô∏èüíöüíôüíúüñ§",
    "üíìüíïüíûüíóüíñ",
    "üå∏üíêüå∫üåπü¶ã",
    "üçîü¶™üçõüç≤ü•ó",
    "üçéüçìüçíüçëüå∂Ô∏è",
    "üßãü•§üßãü•õüç∑",
    "üç¨üç≠üßÅüéÇüç°",
    "üç®üßâüç∫‚òïüçª",
    "ü•™ü•ßüç¶üç•üçö",
    "ü´ñ‚òïüçπüç∑ü•õ",
    "‚òïüßÉüç©üç¶üçô",
    "üçÅüåæüíÆüçÇüåø",
    "üå®Ô∏èüå•Ô∏è‚õàÔ∏èüå©Ô∏èüåßÔ∏è",
    "üå∑üèµÔ∏èüå∏üå∫üíê",
    "üíÆüåºüåªüçÄüçÅ",
    "üßüü¶∏ü¶πüßôüë∏",
    "üßÖüç†ü•ïüåΩü•¶",
    "üê∑üêπüê≠üê®üêª‚Äç‚ùÑÔ∏è",
    "ü¶ãüêáüêÄüêàüêà‚Äç‚¨õ",
    "üåºüå≥üå≤üå¥üåµ",
    "ü•©üçãüçêüçàüçá",
    "üç¥üçΩÔ∏èüî™üç∂ü•É",
    "üïåüè∞üè©‚õ©Ô∏èüè©",
    "üéâüéäüéàüéÇüéÄ",
    "ü™¥üåµüå¥üå≥üå≤",
    "üéÑüéãüéçüéëüéé",
    "ü¶Öü¶úüïäÔ∏èü¶§ü¶¢",
    "ü¶§ü¶©ü¶öü¶Éü¶Ü",
    "üê¨ü¶≠ü¶àüêãüê≥",
    "üêîüêüüê†üê°ü¶ê",
    "ü¶©ü¶Äü¶ëüêôü¶™",
    "üê¶ü¶Çüï∑Ô∏èüï∏Ô∏èüêö",
    "ü•™üç∞ü•ßüç®üç®",
    "ü•¨üçâüßÅüßáüîÆ",
]

def clean_text(text):
    """Bi√ßimlendirme dili √∂zel karakterlerinden ka√ß"""
    if not text:
        return ""
    return re.sub(r'([_*ÓÄÅÓÄÅ()~`>#+-=|{}.!])', r'\\1', text)

async def is_admin(chat_id, user_id):
    admin_ids = [
        admin.user.id
        async for admin in app.get_chat_members(
            chat_id, filter=ChatMembersFilter.ADMINISTRATORS
        )
    ]
    return user_id in admin_ids

async def process_members(chat_id, members, text=None, replied=None):
    tagged_members = 0
    usernum = 0
    usertxt = ""
    emoji_sequence = random.choice(EMOJI)
    emoji_index = 0
    
    for member in members:
        if chat_id not in SPAM_CHATS:
            break
        if member.user.is_deleted or member.user.is_bot:
            continue
            
        tagged_members += 1
        usernum += 1
        
        emoji = emoji_sequence[emoji_index % len(emoji_sequence)]
        usertxt += f"[{emoji}](tg://user?id={member.user.id}) "
        emoji_index += 1
        
        if usernum == 5:
            try:
                if replied:
                    await replied.reply_text(
                        usertxt,
                        disable_web_page_preview=True,
                        parse_mode=ParseMode.MARKDOWN
                    )
                else:
                    await app.send_message(
                        chat_id,
                        f"{text}\n{usertxt}",
                        disable_web_page_preview=True,
                        parse_mode=ParseMode.MARKDOWN
                    )
                await asyncio.sleep(2)  # Reduced sleep time to 2 seconds
                usernum = 0
                usertxt = ""
                emoji_sequence = random.choice(EMOJI)
                emoji_index = 0
            except FloodWait as e:
                await asyncio.sleep(e.value + 2)  # Extra buffer time
            except Exception as e:
                await app.send_message(chat_id, f"Etiketleme yapƒ±lƒ±rken hata olu≈ütu: {str(e)}")
                continue
    
    if usernum > 0 and chat_id in SPAM_CHATS:
        try:
            if replied:
                await replied.reply_text(
                    usertxt,
                    disable_web_page_preview=True,
                    parse_mode=ParseMode.MARKDOWN
                )
            else:
                await app.send_message(
                    chat_id,
                    f"{text}\n\n{usertxt}",
                    disable_web_page_preview=True,
                    parse_mode=ParseMode.MARKDOWN
                )
        except Exception as e:
            await app.send_message(chat_id, f"Son partiyi (veri k√ºmesini) g√∂nderirken hata olu≈ütu: {str(e)}")
    
    return tagged_members

@app.on_message(
    filters.command(["all", "allmention", "mentionall", "tagall"], prefixes=["/", "@"])
)
async def tag_all_users(_, message):
    admin = await is_admin(message.chat.id, message.from_user.id)
    if not admin:
        return await message.reply_text("Sadece y√∂neticiler bu komutu kullanabilir.")

    if message.chat.id in SPAM_CHATS:  
        return await message.reply_text(  
            "Etiketleme i≈ülemi zaten devam ediyor. Durdurmak i√ßin /cancel komutunu kullanƒ±n.."  
        )  
    
    replied = message.reply_to_message  
    if len(message.command) < 2 and not replied:  
        return await message.reply_text(  
            "Herkesi etiketlemek i√ßin ≈üu gibi bir metin ver: @all Merhaba Arkada≈ülar`"  
        )  
    
    try:  
        # Get all members at once to avoid multiple iterations
        members = []
        async for m in app.get_chat_members(message.chat.id):
            members.append(m)
        
        total_members = len(members)
        SPAM_CHATS.append(message.chat.id)
        
        text = None
        if not replied:
            text = clean_text(message.text.split(None, 1)[1])
        
        tagged_members = await process_members(
            message.chat.id,
            members,
            text=text,
            replied=replied
        )
        
        summary_msg = f"""
‚úÖ Etiketleme tamamlandƒ±!

Toplam Kullanƒ±cƒ±: {total_members}
Etiketlenen Kullanƒ±cƒ±: {tagged_members}
"""
        await app.send_message(message.chat.id, summary_msg)

    except FloodWait as e:  
        await asyncio.sleep(e.value)  
    except Exception as e:  
        await app.send_message(message.chat.id, f"Bir hata olu≈ütu: {str(e)}")  
    finally:  
        try:  
            SPAM_CHATS.remove(message.chat.id)  
        except Exception:  
            pass

@app.on_message(
    filters.command(["admintag", "adminmention", "admins", "report"], prefixes=["/", "@"])
)
async def tag_all_admins(_, message):
    if not message.from_user:
        return

    admin = await is_admin(message.chat.id, message.from_user.id)  
    if not admin:  
        return await message.reply_text("Sadece y√∂neticiler bu komutu kullanabilir.")  

    if message.chat.id in SPAM_CHATS:  
        return await message.reply_text(  
            "Etiketleme i≈ülemi zaten devam ediyor. Durdurmak i√ßin /cancel komutunu kullanƒ±n."  
        )  
    
    replied = message.reply_to_message  
    if len(message.command) < 2 and not replied:  
        return await message.reply_text(  
            "Y√∂neticileri etiketlemek i√ßin ≈ü√∂yle bir metin kullanabilirsiniz:@admins Merhaba Arkada≈ülar`"  
        )  
    
    try:  
        # Get all admins at once
        members = []
        async for m in app.get_chat_members(
            message.chat.id, filter=ChatMembersFilter.ADMINISTRATORS  
        ):
            members.append(m)
        
        total_admins = len(members)
        SPAM_CHATS.append(message.chat.id)
        
        text = None
        if not replied:
            text = clean_text(message.text.split(None, 1)[1])
        
        tagged_admins = await process_members(
            message.chat.id,
            members,
            text=text,
            replied=replied
        )
        
        summary_msg = f"""
‚úÖ Admin Etiketleme Tamamlandƒ±

Toplam Y√∂netici: {total_admins}
Etiketlenen Y√∂neticiler: {tagged_admins}
"""
        await app.send_message(message.chat.id, summary_msg)

    except FloodWait as e:  
        await asyncio.sleep(e.value)  
    except Exception as e:  
        await app.send_message(message.chat.id, f"Bir Hata Olu≈ütu: {str(e)}")  
    finally:  
        try:  
            SPAM_CHATS.remove(message.chat.id)  
        except Exception:  
            pass

@app.on_message(
    filters.command(
        [
            "stopmention",
            "cancel",
            "cancelmention",
            "offmention",
            "mentionoff",
            "cancelall",
        ],
        prefixes=["/", "@"],
    )
)
async def cancelcmd(_, message):
    chat_id = message.chat.id
    admin = await is_admin(chat_id, message.from_user.id)
    if not admin:
        return await message.reply_text("Sadece y√∂neticiler bu komutu kullanabilir.")

    if chat_id in SPAM_CHATS:  
        try:  
            SPAM_CHATS.remove(chat_id)  
        except Exception:  
            pass  
        return await message.reply_text("Etiketleme i≈ülemi ba≈üarƒ±yla durduruldu!")  
    else:  
        return await message.reply_text("≈ûu anda herhangi bir etiketleme i≈ülemi y√ºr√ºt√ºlm√ºyor!")

MODULE = "T·¥Ä…¢·¥Ä ü ü"
HELP = """
@all veya /all | /tagall veya @tagall | /mentionall veya @mentionall [metin] veya [mesajƒ± yanƒ±tla] - Grubundaki t√ºm kullanƒ±cƒ±larƒ± rastgele emojilerle etiketle (her 5 kullanƒ±cƒ±da emoji deƒüi≈üir).

/admintag veya @admintag | /adminmention veya @adminmention | /admins veya @admins [metin] veya [herhangi bir mesaja yanƒ±t] - Grubundaki t√ºm y√∂neticileri rastgele emojilerle etiketle (her 5 kullanƒ±cƒ±da emoji deƒüi≈üir)

/stopmention veya @stopmention | /cancel veya @cancel | /offmention veya @offmention | /mentionoff veya @mentionoff | /cancelall veya @cancelall - √áalƒ±≈üan herhangi bir etiketleme s√ºrecini durdur

Not:

1. Bu komutlarƒ± yalnƒ±zca y√∂neticiler kullanabilir.
2. Bot ve asistanƒ±nƒ±zƒ±n grubunuzda y√∂netici olmasƒ± gerekir.
3. Kullanƒ±cƒ±lar, profillerine baƒülantƒ±lƒ± rastgele emojilerle etiketlenecektir.
4. ƒ∞≈ülem tamamlandƒ±ktan sonra, etiketleme sayƒ±larƒ±yla birlikte bir √∂zet alƒ±rsƒ±nƒ±z.
5. Her seferinde 5 kullanƒ±cƒ± etiketlenir ve her grup i√ßin benzersiz bir emoji dizisi kullanƒ±lƒ±r.
"""
